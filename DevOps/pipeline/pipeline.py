#!/usr/bin/env python3

"""
pipeline -- Command-line tool for uploading releases to GitHub

References:
  * https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/
  * https://developer.github.com/v3/repos/releases/
"""

from argparse import ArgumentParser
import datetime
import json
import logging
from urllib.request import Request, urlopen
from urllib.parse import urljoin

import jwt

logging.basicConfig(format='[{asctime}][{levelname}]: {message}', style='{',
                    level=logging.DEBUG)

GITHUB_API_BASE_URL = 'https://api.github.com'
TOKEN_LIFETIME = 10*60


def parse_options():
    parser = ArgumentParser(description='Command-line tool for uploading releases to GitHub')
    parser.add_argument('-o', '--owner', help='GitHub repository owner', default='pioneers')
    parser.add_argument('-r', '--repo', help='GitHub repository', default='PieCentral')
    parser.add_argument('-k', '--key-file', help='Path to private key file generated by GitHub Apps', required=True)
    parser.add_argument('-a', '--app-id', help='GitHub App ID', required=True)
    return parser.parse_args()

options = parse_options()


def generate_token(options, now):
    with open(options.key_file, 'rb') as key_file:
        key = key_file.read()
    return jwt.encode({
        'iat': now,                   # "Issued at" time
        'exp': now + TOKEN_LIFETIME,  # Expires after 10 minutes
        'iss': options.app_id
    }, key, algorithm='RS256').decode('utf-8')


def make_retrieve_json(options):
    token, last_updated = None, None
    def request_json(url, data=None, headers=None, method='GET'):
        now = int(datetime.datetime.now().timestamp())
        nonlocal last_updated
        if not last_updated or now >= last_updated + TOKEN_LIFETIME:
            nonlocal token
            token, last_updated = generate_token(options, now), now

        headers_with_defaults = {
            'Authorization': f'Bearer {token}',
            'Accept': 'application/vnd.github.machine-man-preview+json'
        }
        headers_with_defaults.update(headers or {})
        request = Request(url, method=method, data=(data or {}),
                          headers=headers_with_defaults)
        logging.debug(f'{method} {url}')
        with urlopen(request) as response:
            return json.load(response)

    return request_json

request_json = make_retrieve_json(options)


def retrieve_access_token():
    install_url = urljoin(
        GITHUB_API_BASE_URL,
        f'/repos/{options.owner}/{options.repo}/installation')
    access_token_url = request_json(install_url)['access_tokens_url']
    return request_json(access_token_url, method='POST')['token']


def create_release(release_options, access_token):
    default_release_options = {'target_commitish': 'master'}
    default_release_options.update(release_options)
    serialized_data = json.dumps(default_release_options).encode('utf-8')
    headers = {'Authorization': f'Bearer {access_token}'}
    request_json(urljoin(
        GITHUB_API_BASE_URL,
        f'/repos/{options.owner}/{options.repo}/releases'),
        serialized_data, headers, 'POST')


def main():
    access_token = retrieve_access_token()
    logging.info('Retrieved access token.')
    create_release({
        'tag_name': 'v0.0.0',
        'name': 'test',
        'body': '*Testing* release automation',
        'draft': True
    }, access_token)


if __name__ == '__main__':
    main()
